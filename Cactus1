import Foundation
import PlaygroundSupport

PlaygroundPage.current.needsIndefiniteExecution = true

class Session {
    let durationInSeconds: Int
    
    init(durationInSeconds: Int) {
        self.durationInSeconds = durationInSeconds
    }
}

protocol SessionManagerDelegate {
    func showSessionStarted()
    func showTimeLeft(secondsLeft: Int)
    func showSessionEnded()
    func userCancelledSession()
}

class SessionManager {
    var sessionDelegate: SessionManagerDelegate
    var timer: Timer?
    let sessionStorage = SessionsStorage()
    
    init(sessionDelegate: SessionManagerDelegate) {
        self.sessionDelegate = sessionDelegate
    }
    
    func startSession(session: Session) {
        sessionDelegate.showSessionStarted()
        sessionDelegate.showTimeLeft(secondsLeft: session.durationInSeconds)
        
        var secondsLeft = session.durationInSeconds
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in
            secondsLeft -= 1
            self.sessionDelegate.showTimeLeft(secondsLeft: secondsLeft)
            
            if secondsLeft == 0 {
                SessionsStorage.shared.add(session: session)
                self.sessionDelegate.showSessionEnded()
                
                self.timer?.invalidate()
                self.timer = nil
            }
        }
    }
    
    func cancelSession(){
        self.timer?.invalidate()
        self.timer = nil
    }
}

class SessionsStorage {
    static let shared = SessionsStorage()
    
    var sessions = [Session]()
    
    func add(session: Session) {
        sessions.append(session)
    }
}

class SessionView: SessionManagerDelegate {
    var sessionManager: SessionManager?
    
    func userDidStartSession(durationInSeconds: Int) {
        sessionManager?.startSession(session: Session(durationInSeconds: durationInSeconds))
    }
    
    func showSessionStarted() {
        print("sessionStarted")
    }
    
    func showTimeLeft(secondsLeft: Int) {
        print("\(secondsLeft)")
    }
    
    func showSessionEnded() {
        print("sessionEnded")
    }
    
    func userCancelledSession(){
        sessionManager?.cancelSession()
        print("sessionCancelled")
    }
}


class Break {
    let durationInSeconds: Int
    
    init(durationInSeconds: Int) {
        self.durationInSeconds = durationInSeconds
    }
}

protocol BreakManagerDelegate {
    func showBreakStarted()
    func showTimeLeft(secondsLeft: Int)
    func showBreakEnded()
}

class BreakView: BreakManagerDelegate {
    var breakManager: BreakManager?
    
    func userStartedBreak(durationInSeconds: Int) {
        breakManager?.startBreak(abreak: Break(durationInSeconds: durationInSeconds))
    }
    
    func showBreakStarted() {
        print("break Started")
    }
    
    func showTimeLeft(secondsLeft: Int) {
        print("\(secondsLeft)")
    }
    
    func showBreakEnded() {
        print("break Ended")
    }
    
}

class BreakManager {
    var breakDelegate: BreakManagerDelegate
    var timer: Timer?
    
    init(breakDelegate: BreakManagerDelegate) {
        self.breakDelegate = breakDelegate
    }
    
    func startBreak(abreak: Break) {
        breakDelegate.showBreakStarted()
        breakDelegate.showTimeLeft(secondsLeft: abreak.durationInSeconds)
        
        var secondsLeft = abreak.durationInSeconds
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in
            secondsLeft -= 1
            self.breakDelegate.showTimeLeft(secondsLeft: secondsLeft)
            
            if secondsLeft == 0 {
              
                self.breakDelegate.showBreakEnded()
                
                self.timer?.invalidate()
                self.timer = nil
            }
        }
    }
}


let breakView = BreakView()
breakView.userStartedBreak(durationInSeconds: 5)

//let view = SessionView()
//view.sessionManager = SessionManager(sessionDelegate: view)
//view.userDidStartSession(durationInSeconds: 10)
//
//DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + .seconds(3)) {
//    view.userCancelledSession()
//}
